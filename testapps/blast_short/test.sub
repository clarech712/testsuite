#!/bin/bash
#SBATCH -N1 -t5:00 -n 12
#
# A short and quick (~10 seconds) TSA_NT BLAST search.
#
cd ${SLURM_SUBMIT_DIR:-.}
DB=$TESTPILOT_DB
NODES=1
if [ -n "${SLURM_JOB_ID}" ]; then
    NODES=`srun hostname | wc -l`
fi

QUERY=Ecoli.dna.loc.fasta
mkdir -p output
TSADB=/cluster/tufts/bio/data/blast/latest
BLASTDB=$TSADB
if [[ $DB == "datasets" ]]; then
	DBDIR=$TSADB
elif [[ $DB == "depot" ]]; then
	DBDIR=$TSADB
elif [[ $DB == "scratch" ]]; then
	DBDIR=${CLUSTER_SCRATCH}/tsa
elif [[ $DB == "tmp" ]]; then 
	DBDIR=/tmp/tsa
elif [[ $DB == "shm" ]]; then
	DBDIR=/dev/shm/tsa
fi
if [[ $DB == "scratch" ]] || [[ $DB == "tmp" ]] || [[ $DB == "shm" ]]; then
    mkdir -p $DBDIR
    echo copy db
    /usr/bin/time -f "copy DB %e seconds\n" cp -rp $TSADB/nr* $DBDIR 2>&1
fi
ncores=`cat /proc/cpuinfo | grep 'processor' | wc -l`

# We used to do a '/usr/bin/time -f ... blastn ...', but this does not
# work with biocontainers (time command expects a bona-fide executable,
# not a shell function).  So do it the hardcore way.
# A bc trick: use 'scale' and divide by 1 to force desired # of decimal places.
# And filter out any 'INFO:' messages singularity runtime might generate.
tStart=$(date +%s.%N) 				# Epoch seconds and nanoseconds
blastn -db ${DBDIR}/tsa_nt -num_threads ${ncores} -query $QUERY            \
       -out output/${ncores}-${DB}.out -outfmt 6 -evalue 0.0000000001 2>&1 \
  | grep -v ^INFO:
tFinish=$(date +%s.%N)
tDelta=$(echo "scale=2; ($tFinish - $tStart)/1" | bc)
printf "$DB with ${ncores} cores, blast time $tDelta\n"

# For the short test, don't measure time... just make sure there is output.
head output/${ncores}-${DB}.out | wc -l
